# Solution 2
The challenge can also be solved using qgis Expression
Go to Processing Toolbox > Geometry by Expression > Output Geometry As Polygon

Expression 1: 

collect_geometries(
    array_foreach(
        generate_series(1, num_geometries(segments_to_lines($geometry))),
        centroid(geometry_n(segments_to_lines($geometry), @element))
    )
)

Expression 2:

Go to Processing Toolbox > Geometry by Expression > Output Geometry As Line

shortest_line ($geometry, overlay_nearest ('roads', $geometry) [0])

## Breakdown

segments_to_lines($geometry):
Purpose: Converts the input geometry (typically a polygon representing a building) into line segments. Each edge of the polygon becomes a separate line segment.
Input: A geometry object (e.g., a building polygon).
Output: A set of line segments.

num_geometries(...):
Purpose: Counts the number of geometries (line segments) produced by segments_to_lines($geometry).
Input: The output from segments_to_lines($geometry).
Output: An integer representing the number of line segments.

generate_series(1, num_geometries(...)):
Purpose: Generates a series of integers from 1 to the number of geometries (line segments). This series is used as indices to iterate over each segment.
Output: An array of integers.

array_foreach(...):
Purpose: Iterates over each index generated by generate_series. For each index, it executes the provided expression.
Input: The series of indices and the expression to evaluate for each index.
Output: An array containing results from the evaluated expression for each index.

Inside array_foreach(...):
geometry_n(segments_to_lines($geometry), @element):
Purpose: Retrieves the geometry (line segment) at the current index (@element) from the array of line segments.
Output: A single line segment geometry.

centroid(...):
Purpose: Calculates the centroid (geometric center) of the specific line segment retrieved in the previous step.
Output: A point geometry representing the centroid of that segment.

collect_geometries(...):
Purpose: Aggregates all centroids calculated during the iteration into a single geometry collection (e.g., MultiPoint).
Output: A collection of point geometries representing centroids.

## Breakdwon Expresion 2
overlay_nearest('roads', $geometry):
Purpose: Finds the nearest feature from the specified layer ('roads') to the input geometry ($geometry). This function returns an array of nearest features.
Input: The name of the layer ('roads') and the geometry to compare against.
Output: An array containing the nearest road features.

overlay_nearest('roads', $geometry):
Purpose: Accesses the first element in the array returned by overlay_nearest, which represents the closest road feature to the input geometry.
Output: The nearest road feature's geometry.

shortest_line($geometry, overlay_nearest(...)):
Purpose: Calculates the shortest line between the input geometry ($geometry) and the nearest road feature obtained from overlay_nearest.
Input: The input geometry and its closest road feature's geometry.
Output: A line geometry representing the shortest connection between the building's edge (or centroid) and the nearest road segment.
